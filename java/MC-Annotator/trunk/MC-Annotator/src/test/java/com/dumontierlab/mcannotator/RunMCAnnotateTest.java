package com.dumontierlab.mcannotator;

import com.dumontierlab.mcannotator.bin.RunMCAnnotate;

import junit.framework.TestCase;

public class RunMCAnnotateTest extends TestCase{
	public RunMCAnnotateTest(String testName){
		super(testName);
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		/*
		RunMCAnnotate r = new RunMCAnnotate("/home/jose/tmp/input/pdb1y26.ent.gz");
		r.setOutputDirectory("/home/jose/tmp/output/");
		Iterator<String> itr = r.getInputPaths().iterator();
		while(itr.hasNext()){
			String inputPath = itr.next();
			int numOfModels = r.getNumberOfModels(inputPath);
			String filename = r.getFilenameFromPath(inputPath);
			String pdbId =r.getPDBIdFromPath(inputPath);
			//now we can run MCAnnotate
			if(numOfModels ==0){
				System.out.println("Running MC-Annotate on " + filename + "...");
				String[] cmdArr = {"MC-Annotate", inputPath};
				Process mcaProcess = Runtime.getRuntime().exec(cmdArr);
				String mcaOutput ="";
				mcaOutput = RunMCAnnotate.writeProcessOutput(mcaProcess);
				FileWriter fstream = new FileWriter(r.getMCAOutputDir()+"/"+pdbId+"_M_1.out");
				BufferedWriter out = new BufferedWriter(fstream);
				out.write(mcaOutput);
				out.close();
			}
		}//while
		*/
		/*
		RunMCAnnotate r = new RunMCAnnotate("/opt/data/pdb/nucleic_acids/rna/pdb", "/opt/data/mcannotate/rna/mca");
		//now iterate over each pdb file in the input directory
		Iterator<String> itr = r.getInputPaths().iterator();
		while (itr.hasNext()) {
			String inputPath = itr.next();
			int numOfModels = r.getNumberOfModels(inputPath);
			String filename = r.getFilenameFromPath(inputPath);
			String pdbId = r.getPDBIdFromPath(inputPath);
			// now we should be ready to run MC-Annotate
			if (numOfModels == 0) {
				try {
					System.out.println("Running MC-Annotate on " + filename + "...");
					String[] cmdArr = {"MC-Annotate", inputPath};
					Process mcaProcess = Runtime.getRuntime().exec(cmdArr);
					String mcaOutput ="";
					mcaOutput = RunMCAnnotate.writeProcessOutput(mcaProcess);
					try{
						FileWriter fstream = new FileWriter(r.getMCAOutputDir()+"/"+pdbId+"_M_1.out");
						BufferedWriter out = new BufferedWriter(fstream);
						out.write(mcaOutput);
						out.close();
					}catch (Exception e){
						System.err.println("Error: " + e.getMessage());
						System.exit(-1);
					}//catch
				}catch (IOException ioe) {
					System.out.println("Error executing MC-Annotate!\nMake sure that MC-Annotate is in your path.");
					System.exit(-1);
				}//catch
				
			}// if
			else if(numOfModels != 0){
				int j = 1;
				for (int i=0;i<numOfModels;i++){
					try{
						System.out.println("Running MC-Annotate on model "+Integer.toString(j)+ " of " + filename + "...");
						String[] cmdArr = {"MC-Annotate", "-f", Integer.toString(j), inputPath};
						Process mcaProcess = Runtime.getRuntime().exec(cmdArr);
						String mcaOutput = "";
						mcaOutput = RunMCAnnotate.writeProcessOutput(mcaProcess);
						//make sure that there is an output generated by MCAnnotate
						if(mcaOutput.length() != 0){
							try{
								FileWriter fstream = new FileWriter(r.getMCAOutputDir()+"/"+pdbId+"_M_"+Integer.toString(j)+".out");
								BufferedWriter out = new BufferedWriter(fstream);
								out.write(mcaOutput);
								out.close();
							}catch(Exception e){
								System.err.println("Error: " + e.getMessage());
								System.exit(-1);
							}
						}
					}catch(IOException ioe){
						System.out.println("Error executing MC-Annotate!\nMake sure that MC-Annotate is in your path.");
						System.exit(-1);
					}
					j++;
				}//for
			}//else if
		}// while
		*/

	}

}
